/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(MyNewGrammar)
import java.io.*;
import java.util.*;


public class MyNewGrammar
{
  public static void main(String args []) throws ParseException
  {
    Scanner sc  = new Scanner(System.in);
    while (true) {
		String string = sc.nextLine();
		String s = string.replace("\n", "");
        InputStream in = new ByteArrayInputStream(s.getBytes());
        MyNewGrammar parser = new MyNewGrammar(in);
    	try {
        //Command result = parser.parseFile();
		Command result = parser.parseFile();        
        System.out.println("file parsed successfully.");       
 		//System.out.println(result); 
      	}
      	catch(ParseException e){
        System.out.println(e.toString());
      }
    }
  }
 } 

//  private static String usefulTypes[] = { 
//    "p_cmd_and_args",  "p_arg_list", "p_pipe_list",
//	"p_io_modifier", "p_io_modifier_list", "p_background_opt", "p_command_line"
//	}
PARSER_END(MyNewGrammar)

/* SCANNING */

SKIP :
{
  " "
| "\r"
| "\t"
}

TOKEN : /* OPERATORS */
{
  < GREAT : ">" >
| < LESS : "<" >
| < GREATGREAT : ">>" >
| < GREATAMPERSAND : ">&" >
| < PIPE : "|" >
| < AMPERSAND : "&" >
//| < EOL : "\n" >
}

TOKEN :
{
  < WORD : ["a"-"z","A"-"Z","_", "-"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
}

/* PARSING */
//return an object from javacc

//Command parseFile() : {
//  Command command_line;
//} 
//{ 
//   p_command_line(){command_line = p_command_line();}
// <EOF> { return command_line; }
//}

Command parseFile() : {
  List<SingleCommand> pipe_list = new ArrayList<SingleCommand>();
  List<ArrayList<String>> io_modifier_list = new ArrayList<ArrayList<String>>();
// background_opt = 1 if run in background/[&]
 int background_opt = 0;
} 
{ 
(pipe_list = p_pipe_list()) [io_modifier_list = p_io_modifier_list()](background_opt = p_background_opt())
{return new Command(pipe_list, io_modifier_list, background_opt);}
}

List<SingleCommand> p_pipe_list(): {
  List<SingleCommand> pipe_list = new ArrayList<SingleCommand>();
  SingleCommand sc;
  SingleCommand psc;
}
{
  (sc = p_cmd_and_args() {pipe_list.add(sc); })
  (<PIPE> (psc = p_cmd_and_args()) {pipe_list.add(psc); })*
  {return pipe_list;}
}

SingleCommand p_cmd_and_args(): {
  Token cmd ;
  List<String> args = new ArrayList<String>();
  Token arg;
}
{
  (cmd = <WORD>)(arg = <WORD> {args.add(arg.image);})* {return new SingleCommand(cmd.image, args); }
}

List<ArrayList<String>> p_io_modifier_list(): {
  List<ArrayList<String>> io_modifiers = new ArrayList<ArrayList<String>>();
  ArrayList<String > io_modifier;
}
{
  (io_modifier = p_io_modifier() {io_modifiers.add(io_modifier);})+
    {return io_modifiers; }
}

ArrayList<String> p_io_modifier(): {
  ArrayList<String> io_modifier = new ArrayList<String>();
  Token dir;
  Token filename;
}
{
  (dir = <GREAT>) (filename = <WORD>) {io_modifier.add(dir.image); io_modifier.add(filename.image);return io_modifier; } 
| (dir = <GREATGREAT>)(filename = <WORD>) {io_modifier.add(dir.image); io_modifier.add(filename.image);return io_modifier; }
| (dir = <GREATAMPERSAND>)(filename = <WORD>) {io_modifier.add(dir.image); io_modifier.add(filename.image);return io_modifier; }
| (dir = <LESS>)(filename = <WORD>) {io_modifier.add(dir.image); io_modifier.add(filename.image);return io_modifier; }
}

int p_background_opt(): { }
{
  <AMPERSAND> {return 1;}
| <EOF> {return 0;}
}


